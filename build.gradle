buildscript {
    ext {
        kotlinVersion = '1.2.31'
        springBootVersion = '2.0.0.RELEASE'
        springCloudVersion = 'Finchley.M8'
        fastjsonVersion = '1.2.47'
        mysqlConnectorVersion = '5.1.45'
        swagger2Version = '2.8.0'
        hutoolVersion = '4.0.8'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

allprojects {
    group = 'pc.crs'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'io.spring.dependency-management'

    configurations.all {
        resolutionStrategy {
            force "com.alibaba:fastjson:${fastjsonVersion}"
            force "mysql:mysql-connector-java:${mysqlConnectorVersion}"
            force "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
            force "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
            force "io.springfox:springfox-swagger2:${swagger2Version}"
            force "io.springfox:springfox-swagger-ui:${swagger2Version}"
            force "cn.hutool:hutool-all:${hutoolVersion}"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://repo.spring.io/libs-milestone' }
        mavenLocal()
    }
}

subprojects {

    apply plugin: 'kotlin'
    apply plugin: "kotlin-jpa"
    apply plugin: 'kotlin-spring'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    noArg {
        annotation("org.springframework.data.redis.core.RedisHash")
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib"
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

task clean << {
    println '项目清理完成！'
}

task pkg << {
    println '项目打包完成！'
}

clean.dependsOn ':crs-eureka-server:clean'
clean.dependsOn ':crs-auth:crs-auth-server:clean'
clean.dependsOn ':crs-file:crs-file-server:clean'
clean.dependsOn ':crs-forum:crs-forum-server:clean'
clean.dependsOn ':crs-server:clean'

pkg.dependsOn ':crs-eureka-server:bootWar'
pkg.dependsOn ':crs-auth:crs-auth-server:bootWar'
pkg.dependsOn ':crs-file:crs-file-server:bootWar'
pkg.dependsOn ':crs-forum:crs-forum-server:bootWar'
pkg.dependsOn ':crs-server:bootWar'

pkg.dependsOn 'clean'
pkg.shouldRunAfter 'clean'
